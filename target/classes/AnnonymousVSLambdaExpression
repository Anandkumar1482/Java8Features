Anonymous inner class VS Lambda Expression
_______________________________________________
a class without having name is called Anonymous inner class.

EX:1
-----------------
Thread t=new Thread()
{
//a class without having name is called Anonymous inner class.
};
we are writing a class that extends a Thread class.
for that implementation class we are creating an
Object.

===============================================================
Ex:2
Runnable r = new Runnable( )
{
for this class we are implementing Runnable interface
a class without having any name is called Anonymous inner class
};
we are writing a class that implements a Runnable interface.
a class without having any name is called Anonymous inner class.
==============================================================
ex:2
---------
Interface A{
public void m1( );
public void m2( );
}
----------------------------
A a =new A( ){
public void m1( ){
}
public void m2( ){
}
}

Anonymous inner class most power full then lambda expression.
anonymous inner class implements an interface that contains single abstract method
then only we can replace annonymous inner class with lambda Expression





AnonymousInnerclass VS Lambda Expression
========================================================================================
Anonymous inner class ! =Lambda Expression
Anonymous inner class > Lambda expression
if anonymous inner class implements an interface that contains single abstract method then
only we can replace annonymous inner class with lambda expression.
Anonymous inner class can extends a normal class
Anonymous inner class can extends a abstract class
Anonymous inner class can implement an interface which contains any number of abstract
methods.
Lambda Expression
====================
lambda expression can implement an interface which contain single abstract method
1) if the Employee class has employee id and salary then how to find the Second Highest
salary based on Employee id ?